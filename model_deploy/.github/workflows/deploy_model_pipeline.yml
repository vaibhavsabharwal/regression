# This workflow will get the approved model from model registry and deploy to dev, pre-prod and prod

name: Sagemaker Model Deploy Pipeline SMUS project test 1
run-name: ${{ github.actor }} is deploying in SMUS project üöÄ

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug
  push:
    branches: [ main ]
  # pull_request:
  #   branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  GitHub-Actions-SMUS-Deploy:

    runs-on: ubuntu-latest
    env:
      DEPLOY_ACCOUNT: ${{ secrets.DEPLOY_ACCOUNT }}
      AWS_REGION: ${{ secrets.REGION }}
      MODEL_PACKAGE_GROUP_NAME: ${{ secrets.MODEL_PACKAGE_GROUP_NAME }}
      SAGEMAKER_PROJECT_ID: ${{ secrets.SAGEMAKER_PROJECT_ID }}
      SAGEMAKER_PROJECT_NAME: ${{ secrets.SAGEMAKER_PROJECT_NAME }}
      SAGEMAKER_DOMAIN_ARN: ${{ secrets.SAGEMAKER_DOMAIN_ARN }}
      MODEL_BUCKET_ARN: ${{ secrets.MODEL_BUCKET_ARN }}
      AMAZON_DATAZONE_DOMAIN: ${{secrets.AMAZON_DATAZONE_DOMAIN}}
      AMAZON_DATAZONE_SCOPENAME: ${{secrets.AMAZON_DATAZONE_SCOPENAME}}
      AMAZON_DATAZONE_PROJECT: ${{secrets.AMAZON_DATAZONE_PROJECT}}
    steps:
    - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
    - run: echo "üñ•Ô∏è This job is now running on a ${{ runner.os }} server hosted by GitHub!"
    - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
    - run: echo "üë©üèª‚Äçüíª The commit message for the event -\n ${{ github.event.head_commit.message }}"
    - uses: actions/checkout@v4
    - name: Check out repository code
      uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    - name: Configure Dev Account AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
          role-to-assume: ${{secrets.SAGEMAKER_PIPELINE_ROLE_ARN}}
          aws-region: ${{secrets.REGION}}
    - name: Install dependencies
      run: |
        sh install-prerequisites-brew.sh
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
                 
    - name: CDK Synth
      run: |
        cdk synth --no-lookups 
        
    - name: Check and Create Bootstrap
      env:
        AWS_REGION: ${{secrets.REGION}}
        DEPLOY_ACCOUNT: ${{secrets.DEPLOY_ACCOUNT}}
        SAGEMAKER_PIPELINE_ROLE_ARN: ${{secrets.SAGEMAKER_PIPELINE_ROLE_ARN}}
        CDK_QUALIFIER: "gitactions"
      run: |
        # Validate ARN format
        if [[ ! "${SAGEMAKER_PIPELINE_ROLE_ARN}" =~ ^arn:aws:iam::[0-9]{12}:role/ ]]; then
          echo "Error: SAGEMAKER_PIPELINE_ROLE_ARN must be a valid IAM role ARN"
          exit 1
        fi
        
        STACK_EXISTS=$(aws cloudformation list-stacks \
          --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE \
          --query "StackSummaries[?StackName=='CDKToolkit-${CDK_QUALIFIER}'].StackName" \
          --output text) || true
        
        if [ ! -z "$STACK_EXISTS" ]; then
          echo "Bootstrap stack CDKToolkit-${CDK_QUALIFIER} already exists, proceeding with deployment..."
        else
          echo "Bootstrap stack CDKToolkit-${CDK_QUALIFIER} not found, creating new stack..."
          cdk bootstrap aws://${DEPLOY_ACCOUNT}/${AWS_REGION} \
            --toolkit-stack-name CDKToolkit-${CDK_QUALIFIER} \
            --qualifier ${CDK_QUALIFIER} \
            --trust ${DEPLOY_ACCOUNT} \
            --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess 
        fi
          
    - name: CDK Deploy
      env:
        AWS_REGION: ${{secrets.REGION}}
        SAGEMAKER_PIPELINE_ROLE_ARN: ${{secrets.SAGEMAKER_PIPELINE_ROLE_ARN}}
        CDK_QUALIFIER: "gitactions"
      run: |
        cdk deploy \
          --require-approval never \
          --toolkit-stack-name CDKToolkit-${CDK_QUALIFIER} \
          --context "@aws-cdk/core:bootstrapQualifier=${CDK_QUALIFIER}" \
          --verbose

  
    - name: CDK list
      run: |
        cdk list 
    - run: echo "üíØ This github action job's status is ${{ job.status }}."
